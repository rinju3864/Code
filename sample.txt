import org.openqa.selenium.By;
import org.openqa.selenium.Cookie;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;

import java.io.*;
import java.util.Set;

public class SSOWithMfaSessionTest {
    private static WebDriver driver;

    public static void main(String[] args) throws IOException {
        // Step 1: Start the browser
        startBrowser();

        // Step 2: Attempt to load cookies and navigate to the target page
        if (!loadCookies()) {
            // No cookies to load, manual SSO login with MFA is required
            ssoLoginWithMFA();
            saveCookies();
        } else {
            // After loading cookies, check if still logged out (redirected to login page)
            if (isLoginPage()) {
                System.out.println("Cookies expired or invalid, manual SSO login with MFA required.");
                ssoLoginWithMFA();
                saveCookies();  // Save new cookies after login
            } else {
                System.out.println("Cookies loaded successfully, session restored.");
            }
        }

        // Step 3: Perform test actions using the logged-in session
        driver.get("https://your_splunk_url.com/some_page");
        System.out.println("Test run completed with logged-in session.");

        // Close the browser when done
        driver.quit();
    }

    // Method to start the browser
    public static void startBrowser() {
        System.setProperty("webdriver.chrome.driver", "path/to/chromedriver");  // Adjust path to chromedriver
        driver = new ChromeDriver();
        driver.manage().timeouts().implicitlyWait(java.time.Duration.ofSeconds(10));
    }

    // Method for manual SSO login with MFA (you'll complete this manually)
    public static void ssoLoginWithMFA() {
        driver.get("https://your_splunk_url.com");  // Your Splunk login URL

        // You will manually complete the SSO and MFA here.
        // Selenium will wait until you finish logging in.
        System.out.println("Please complete the SSO and MFA login manually.");
        // Add an appropriate wait to allow manual login
        try {
            Thread.sleep(30000);  // Adjust this time based on how long it takes for manual SSO + MFA
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }

    // Method to save cookies to a file
    public static void saveCookies() throws IOException {
        File file = new File("cookies.data");
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(file))) {
            Set<Cookie> cookies = driver.manage().getCookies();
            for (Cookie cookie : cookies) {
                writer.write((cookie.getName() + ";" + cookie.getValue() + ";" + cookie.getDomain() + ";" + cookie.getPath() + ";" + cookie.getExpiry() + ";" + cookie.isSecure()));
                writer.newLine();
            }
        }
        System.out.println("Cookies saved.");
    }

    // Method to load cookies from a file
    public static boolean loadCookies() throws IOException {
        File file = new File("cookies.data");
        if (!file.exists()) {
            System.out.println("No cookies found, login required.");
            return false;  // No cookies to load
        }

        try (BufferedReader reader = new BufferedReader(new FileReader(file))) {
            String line;
            while ((line = reader.readLine()) != null) {
                String[] cookieData = line.split(";");
                Cookie cookie = new Cookie.Builder(cookieData[0], cookieData[1])
                        .domain(cookieData[2])
                        .path(cookieData[3])
                        .build();
                driver.manage().addCookie(cookie);
            }
        }

        driver.navigate().refresh();  // Refresh to apply cookies
        System.out.println("Cookies loaded, attempting session restore.");
        return true;  // Cookies loaded successfully
    }

    // Method to check if we're on the login page (indicating cookies failed or expired)
    public static boolean isLoginPage() {
        // Check if the current URL matches the login page URL after trying to load cookies
        return driver.getCurrentUrl().contains("login") || driver.findElements(By.id("i0116")).size() > 0;
    }
}
